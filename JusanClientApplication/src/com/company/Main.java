package com.company;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;

/**
 *
 * @author john_
 */

class MyFile {
    public static void listDirectory(String path) {
        try {
            File file = new File(path);
            File[] contents = file.listFiles();
            System.out.println("The list of files: ");
            if (contents != null) {
                for (File f : contents) {
                    System.out.print(f.getName() + " ");
                }
            }
        } catch (NullPointerException e) {
            System.out.println("The path is not valid!");
        }
        System.out.println(" ");
    }

    public static void listPythonFiles(String path) {
        try {
            File file = new File(path);

            FilenameFilter filter = (dir, name) -> name.toLowerCase().endsWith(".py");

            File[] contents = file.listFiles(filter);
            System.out.println(".py files: ");
            if (contents != null) {
                for (File f : contents) {
                    System.out.print(f.getName() + " ");
                }
            }
        }
        catch(NullPointerException e) {
            System.out.println("The path is not valid!");
        }
        System.out.println();
    }
    public static void isDirectory(String path) {
        try {
            File file = new File(path);
            if (file.exists() == false) {
                throw new Exception("The path " + path + " is not valid!");
            }
            if (file.isDirectory() == true) {
                System.out.println("True");
            } else {
                System.out.println("False");
            }
        }
        catch(Exception e) {
            System.out.println("The path is not valid!");
        }
    }
    public static void define(String path) {
        try {
            File file = new File(path);
            if (file.exists() == false) {
                throw new Exception("The path " + path + " is not valid!");
            }
            if (file.isDirectory() == true) {
                System.out.println("Directory " + file.getName());
            } else if (file.isFile() == true) {
                System.out.println("File " + file.getName());
            }
        }
        catch(Exception e) {
            System.out.println(e.toString());
        }
    }
    public static void printPermissions(String path) {
        StringBuilder result = new StringBuilder("rwx");
        File file = new File(path);
        if (file.exists() == true && file.isFile() == true) {
            if (file.canRead() == false) {
                result.setCharAt(0, '-');
            }
            if (file.canWrite() == false) {
                result.setCharAt(1, '-');
            }
            if (file.canExecute() == false) {
                result.setCharAt(2, '-');
            }
            System.out.println(result.toString());
        } else {
            System.out.println("The path " + path + " is not a file!");
        }
    }
    public static void setPermissions(String path, String permissions) {
        File file = new File(path);
        if (file.exists() == true && file.isFile() == true) {
            if (permissions.charAt(0) == 'r') {
                file.setReadable(true);
            } else {
                file.setReadable(false);
            }
            if (permissions.charAt(1) == 'w') {
                file.setWritable(true);
            } else {
                file.setWritable(false);
            }
            if (permissions.charAt(2) == 'x') {
                file.setExecutable(true);
            } else {
                file.setExecutable(false);
            }
        } else {
            System.out.println("The path " + path + " is not a file!");
        }
    }
    public static void printContent(String path) {
        try {
            File file = new File(path);
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    String content = scanner.nextLine();
                    System.out.println(content);
                }
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
    public static void appendFooter(String path) {
        try {
            File file = new File(path);
            if (file.isFile() == false) {
                throw new Exception("The path " + path + " is not a file!");
            }
            FileWriter fileWriter = new FileWriter(file, true);
            fileWriter.append("\n# Autogenerated line");
            fileWriter.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
    public static void createBackup(String path) {
        try {
            File file = new File(path);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
            Calendar calendar = Calendar.getInstance();
            File newBackupFile = new File("/tmp/" + simpleDateFormat.format(calendar.getTime()) + ".backup");
            if (newBackupFile.exists()) {
                delete(newBackupFile);
            }
            Files.copy(Path.of(file.getPath()), Path.of(newBackupFile.getPath()));
            File[] contents = file.listFiles();
            if (contents != null) {
                for (File f : contents) {
                    Files.copy(Path.of(f.getPath()), Path.of(newBackupFile.getPath() + "/" + f.getName()));
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    private static void delete(File file) {
        File[] contents = file.listFiles();
        if (contents != null) {
            for (File f : contents) {
                if (Files.isSymbolicLink(f.toPath()) == false) {
                    delete(f);
                }
            }
        }
        file.delete();
    }
    public static void printLongestWord(String path){
        File file = new File(path);
        String temp;
        String longest = "";
        try {
            Scanner scanner = new Scanner(file);
            while (scanner.hasNext()) {
                temp = scanner.next();
                if (temp.length() > longest.length()) {
                    longest = temp;
                }
            }
            System.out.println(longest);
        } catch (FileNotFoundException e) {
            System.out.println("The file is not found!");
        }
    }
    public static void help() {
        System.out.println("MyFS 1.0 команды:\n" +
                "ls <path>               выводит список всех файлов и директорий для `path`\n" +
                "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
                "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
                "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
                "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
                "setmod <path> <perm>    устанавливает права для файла `path`\n" +
                "cat <path>              выводит контент файла\n" +
                "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
                "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
                "greplong <path>         выводит самое длинное слово в файле\n" +
                "help                    выводит список команд и их описание\n" +
                "exit                    завершает работу программы");
    }
    public static void exit() {
        System.out.println("Goodbye");
        System.exit(0);
    }
}


public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // write your code here
        MyFile.help();
        while (true) {
            String path;
            String permissions;
            Scanner scanner = new Scanner(System.in);
            String input = scanner.nextLine();
            String[] inputWords = input.split(" ");
            String command = inputWords[0];
            if (inputWords.length == 2) {
                path = inputWords[1];
            }
            if (inputWords.length == 3) {
                permissions = inputWords[2];
            }

            switch (command) {
                case "ls":
                    MyFile.listDirectory(path);
                    break;
                case "ls_py":
                    MyFile.listPythonFiles(path);
                    break;
                case "id_dir":
                    MyFile.isDirectory(path);
                    break;
                case "define":
                    MyFile.define(path);
                    break
                case "readmod":
                    MyFile.printPermissions(path);
                    break;
                case "setmod":
                    MyFile.setPermissions(path, permissions);
                    break;
                case "cat":
                    MyFile.printContent(path);
                    break;
                case "append":
                    MyFile.appendFooter(path);
                    break;
                case "bc":
                    MyFile.createBackup(path);
                    break;
                case "greplong":
                    MyFile.printLongestWord(path);
                    break;
                case "help":
                    MyFile.help();
                    break;
                case "exit":
                    MyFile.exit();
                    break;
            }
        }
    }
}
